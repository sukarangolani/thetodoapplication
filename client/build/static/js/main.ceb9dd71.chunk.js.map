{"version":3,"sources":["Home.js","Todo.js","Register.js","Login.js","App.js","serviceWorker.js","index.js"],"names":["Home","Fragment","className","to","React","Component","Todo","handleChange","event","setState","target","name","value","taskError","formValid","handleTask","task","obj","userName","localStorage","getItem","taskName","Axios","put","then","response","taskObj","data","catch","err","taskObj2","incompleteTasks","completedTasks","errorMessage","handleAddTask","item","date","post","handleDeleteIncomplete","handleDeleteCompleted","handleLogOut","logOut","state","get","this","clear","type","id","onChange","placeholder","disabled","onClick","length","map","index","key","Date","toLocaleDateString","Register","validator","handleSubmit","preventDefault","password","successMessage","message","error","valid","userNameError","userNameValid","match","passwordError","passwordValid","cpasswordError","cpasswordValid","cpassword","onSubmit","htmlFor","Login","logIn","setItem","toLowerCase","App","style","background","backgroundSize","backgroundPosition","backgroundRepeat","textDecoration","exact","path","component","height","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.ceb9dd71.chunk.js","sourcesContent":["import React from 'react'\r\nimport {Link} from 'react-router-dom'\r\n\r\nclass Home extends React.Component {\r\n    render() {\r\n        return <React.Fragment>\r\n            <div className=\"container\">\r\n                <br /><br /><br /><br /><br /><br />\r\n                <Link to=\"/login\"><button className=\"btn btn-warning btn-lg col-md-3 offset-md-1\">Login</button></Link>\r\n                <Link to=\"/register\"><button className=\"btn btn-danger btn-lg col-md-3 offset-md-3\">Register</button></Link>\r\n            </div><br />\r\n        </React.Fragment>\r\n    }\r\n}\r\n\r\nexport default Home\r\n","import React from 'react'\r\nimport { Redirect } from \"react-router-dom\"\r\nimport Axios from \"axios\"\r\n\r\nclass Todo extends React.Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            task: \"\",\r\n            taskError: \"\",\r\n            formValid: false,\r\n            errorMessage: \"\",\r\n            logOut: false,\r\n            taskObj: {\r\n                incompleteTasks: [],\r\n                completedTasks: []\r\n            }\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        let userName = localStorage.getItem(\"userName\")\r\n        Axios.get(\"http://localhost:4000/getTasks/\" + userName).then((response) => {\r\n            this.setState({ taskObj: response.data, errorMessage: \"\" })\r\n        }).catch((err) => {\r\n            let taskObj2 = {\r\n                incompleteTasks: [],\r\n                completedTasks: []\r\n            }\r\n            if (err.response) {\r\n                this.setState({ errorMessage: \"Some Error Occured\", taskObj: taskObj2 })\r\n\r\n            }\r\n            else {\r\n                this.setState({ errorMessage: \"Server Error!\", taskObj: taskObj2 })\r\n            }\r\n        })\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        this.setState({ [event.target.name]: event.target.value })\r\n        if (event.target.value === \"\") {\r\n            this.setState({ taskError: \"Task cannot be blank\", formValid: false })\r\n        }\r\n        else {\r\n            this.setState({ taskError: \"\", formValid: true })\r\n        }\r\n    }\r\n\r\n    handleTask = (task) => {\r\n\r\n        let obj = {\r\n            userName: localStorage.getItem(\"userName\"),\r\n            taskName: task\r\n        }\r\n\r\n        Axios.put(\"http://localhost:4000/addTask\", obj).then((response) => {\r\n            this.setState({ taskObj: response.data, task:\"\",formValid:false})\r\n        }).catch((err) => {\r\n            let taskObj2 = {\r\n                incompleteTasks: [],\r\n                completedTasks: []\r\n            }\r\n            if (err.response) {\r\n\r\n                this.setState({ errorMessage: \"Some Error Occured\", taskObj: taskObj2 })\r\n            }\r\n            else {\r\n                this.setState({ errorMessage: \"Server Error!\", taskObj: taskObj2 })\r\n            }\r\n        })\r\n\r\n    }\r\n\r\n\r\n\r\n    handleAddTask = (item) => {\r\n\r\n        let obj = {\r\n            userName: localStorage.getItem(\"userName\"),\r\n            taskName: item.name,\r\n            date: item.date\r\n        }\r\n        Axios.post(\"http://localhost:4000/addToCompleted\", obj).then((response) => {\r\n            this.setState({ taskObj: response.data, errorMessage: \"\" })\r\n        }).catch((err) => {\r\n            let taskObj2 = {\r\n                incompleteTasks: [],\r\n                completedTasks: []\r\n            }\r\n            if (err.response) {\r\n\r\n                this.setState({ errorMessage: \"Some Error Occured\", taskObj: taskObj2 })\r\n\r\n            }\r\n            else {\r\n                this.setState({ errorMessage: \"Server Error!\", taskObj: taskObj2 })\r\n            }\r\n        })\r\n    }\r\n\r\n    handleDeleteIncomplete = (item) => {\r\n        let obj = {\r\n            userName: localStorage.getItem(\"userName\"),\r\n            taskName: item.name,\r\n            date: item.date\r\n        }\r\n        Axios.put(\"http://localhost:4000/deleteIncomplete\", obj).then((response) => {\r\n            this.setState({ taskObj: response.data, errorMessage: \"\" })\r\n        }).catch((err) => {\r\n            let taskObj2 = {\r\n                incompleteTasks: [],\r\n                completedTasks: []\r\n            }\r\n            if (err.response) {\r\n\r\n                this.setState({ errorMessage: \"Some Error Occured\", taskObj: taskObj2 })\r\n\r\n            }\r\n            else {\r\n                this.setState({ errorMessage: \"Server Error!\", taskObj: taskObj2 })\r\n            }\r\n        })\r\n    }\r\n\r\n    handleDeleteCompleted = (item) => {\r\n        let obj = {\r\n            userName: localStorage.getItem(\"userName\"),\r\n            taskName: item.name,\r\n            date: item.date\r\n        }\r\n        Axios.put(\"http://localhost:4000/deleteCompleted\", obj).then((response) => {\r\n            this.setState({ taskObj: response.data, errorMessage: \"\" })\r\n        }).catch((err) => {\r\n            let taskObj2 = {\r\n                incompleteTasks: [],\r\n                completedTasks: []\r\n            }\r\n            if (err.response) {\r\n\r\n                this.setState({ errorMessage: \"Some Error Occured\", taskObj: taskObj2 })\r\n\r\n            }\r\n            else {\r\n                this.setState({ errorMessage: \"Server Error!\", taskObj: taskObj2 })\r\n            }\r\n        })\r\n    }\r\n\r\n    handleLogOut = () => {\r\n        this.setState({ logOut: true })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.logOut) {\r\n            //localStorage.removeItem(\"userName\")\r\n            localStorage.clear()\r\n            return <Redirect to=\"/\"></Redirect>\r\n        }\r\n\r\n        else if (!(localStorage.getItem(\"userName\"))) {\r\n            return <Redirect to=\"/\"></Redirect>\r\n        }\r\n\r\n        return <React.Fragment>\r\n\r\n            <div className=\"container-fluid\">\r\n\r\n                <h1 className=\"display-4 text-light text-center\">Welcome back  {localStorage.getItem(\"userName\")}</h1>\r\n\r\n                <br /><br /><br />\r\n                <div className=\"col-md-4 offset-md-4 card bg-light\">\r\n                    <div className=\"card-body\">\r\n                        <div className=\"input-group\">\r\n                            <input type=\"text\" id=\"task\" name=\"task\" onChange={this.handleChange} className=\"form-control\" placeholder=\"Enter the task to be completed\" value={this.state.task} />\r\n                            <button disabled={!this.state.formValid} className=\"col-md-3 ml-1 btn btn-danger\" onClick={() => { this.handleTask(this.state.task) }}>Add</button>\r\n                        </div>\r\n                        <span className=\"text-danger\">{this.state.taskError}</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <br /><br />\r\n\r\n            {this.state.errorMessage?<h1 className=\"text-center text-light\">{this.state.errorMessage}</h1>:\r\n            <div className=\"container-fluid\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-lg-5 offset-lg-1 card\">\r\n                        <div className=\"card-body\">\r\n                            <h5>Incomplete Tasks</h5>\r\n\r\n                            {this.state.taskObj.incompleteTasks.length > 0 ?\r\n                                <table className=\"table\">\r\n\r\n                                    {this.state.taskObj.incompleteTasks.map((item, index) =>\r\n                                        <tbody key={index}>\r\n                                            <tr>\r\n                                                <td>{item.name}</td>\r\n                                                <td>{new Date(item.date).toLocaleDateString()}</td>\r\n                                                <td><button className=\"btn btn-success\" onClick={() => { this.handleAddTask(item) }}>Complete</button></td>\r\n                                                <td><button className=\"btn btn-danger\" onClick={() => { this.handleDeleteIncomplete(item) }}>Delete</button></td>\r\n                                            </tr>\r\n                                        </tbody>)}\r\n                                </table> : <div><br></br><p className=\"text-success\">You don't have any incomplete Task!</p></div>}\r\n\r\n\r\n\r\n\r\n\r\n\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n\r\n\r\n                    <div className=\"col-lg-4 offset-lg-1 card\">\r\n                        <div className=\"card-body\">\r\n                            <h5>Completed Tasks</h5>\r\n                            {this.state.taskObj.completedTasks.length > 0 ?\r\n                                <table className=\"table\">\r\n                                    {this.state.taskObj.completedTasks.map((item, index) =>\r\n                                        <tbody key={index}>\r\n                                            <tr>\r\n                                                <td>{item.name}</td>\r\n                                                <td>{new Date(item.date).toLocaleDateString()}</td>\r\n                                                <td><button className=\"btn btn-danger\" onClick={() => { this.handleDeleteCompleted(item) }}>Delete</button></td>\r\n                                            </tr>\r\n                                        </tbody>)}\r\n\r\n\r\n                                </table> : <div><br></br><p className=\"text-danger\">No Task is completed yet!</p></div>}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n                }\r\n\r\n    \r\n\r\n                <br /><br />\r\n            <div className=\"container-fluid\">\r\n                <div className=\"text-center\">\r\n                    <button className=\"btn btn-warning btn-lg\" onClick={this.handleLogOut}>Log Out</button>\r\n                </div>\r\n            </div>\r\n        </React.Fragment>\r\n    }\r\n}\r\n\r\n\r\nexport default Todo","import React from 'react'\r\nimport Axios from 'axios'\r\nimport {Link} from 'react-router-dom'\r\n\r\nclass Register extends React.Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            userName: \"\",\r\n            password: \"\",\r\n            cpassword: \"\",\r\n            userNameError: \"\",\r\n            passwordError: \"\",\r\n            cpasswordError: \"\",\r\n            valid: {\r\n                userNameValid: false,\r\n                passwordValid: false,\r\n                cpasswordValid: false\r\n            },\r\n            formValid: false,\r\n            successMessage:\"\",\r\n            errorMessage:\"\"\r\n        }\r\n    }\r\n    handleChange = (event) => {\r\n        let name = event.target.name\r\n        let value = event.target.value\r\n        this.setState({ [name]: value })\r\n        this.validator(name, value)\r\n    }\r\n    handleSubmit = (event) => {\r\n        event.preventDefault()\r\n        let obj={\r\n            userName:this.state.userName,\r\n            password:this.state.password\r\n        }\r\n        Axios.post(\"http://localhost:4000/register\",obj).then((response)=>{\r\n            this.setState({successMessage:response.data.message,errorMessage:\"\"})\r\n        }).catch((error)=>{\r\n            if(error.response){\r\n                this.setState({errorMessage:error.response.data.message,successMessage:\"\"})\r\n            }\r\n            else{\r\n                this.setState({errorMessage:\"Server Error!\",successMessage:\"\"})\r\n            }\r\n            \r\n        })\r\n    }\r\n    validator = (name, value) => {\r\n        let valid = this.state.valid\r\n        switch (name) {\r\n            case 'userName': if (value === \"\") {\r\n                this.setState({ userNameError: \"Username cannot be blank\" })\r\n                valid.userNameValid = false\r\n            }\r\n            else if(!value.match(/^[a-zA-Z]{1,}$/)){\r\n                this.setState({ userNameError: \"Username can only contain alphabets\" })\r\n                valid.userNameValid = false\r\n            }\r\n            else {\r\n                this.setState({ userNameError: \"\" })\r\n                valid.userNameValid = true\r\n            }\r\n                break\r\n            case 'password': if (value === \"\") {\r\n                this.setState({ passwordError: \"Password cannot be blank\" })\r\n                valid.passwordValid = false\r\n            }\r\n            else {\r\n                this.setState({ passwordError: \"\" })\r\n                valid.passwordValid = true\r\n            }\r\n                break\r\n            case 'cpassword': if (value === \"\") {\r\n                this.setState({ cpasswordError: \"Confirm Password cannot be blank\" })\r\n                valid.cpasswordValid = false\r\n            }\r\n            else if (value !== this.state.password) {\r\n                this.setState({ cpasswordError: \"Password is not same\" })\r\n                valid.cpasswordValid = false\r\n            }\r\n            else {\r\n                this.setState({ cpasswordError: \"\" })\r\n                valid.cpasswordValid = true\r\n            }\r\n                break\r\n\r\n            default: break\r\n        }\r\n        if (valid.cpasswordValid && valid.passwordValid && valid.userNameValid) {\r\n            this.setState({ formValid: true })\r\n        }\r\n        else {\r\n            this.setState({ formValid: false })\r\n        }\r\n    }\r\n    render() {\r\n        return <React.Fragment>\r\n            <div className=\"col-md-4 offset-md-4 mt-3 card bg-light\">\r\n                <div className=\"card-body text-dark\">\r\n                    <h4>Sign Up Form</h4>\r\n                    <form onSubmit={this.handleSubmit}>\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"userName\">Username:</label>\r\n                            <input type=\"text\" id=\"userName\" name=\"userName\" onChange={this.handleChange} value={this.state.userName} placeholder=\"Enter username\" className=\"form-control\" />\r\n                            <span className=\"text-danger\">{this.state.userNameError}</span>\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"userName\">Password:</label>\r\n                            <input type=\"password\" id=\"password\" name=\"password\" onChange={this.handleChange} value={this.state.password} placeholder=\"Enter password\" className=\"form-control\" />\r\n                            <span className=\"text-danger\">{this.state.passwordError}</span>\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"userName\">Confirm Password:</label>\r\n                            <input type=\"password\" id=\"cpassword\" name=\"cpassword\" onChange={this.handleChange} value={this.state.cpassword} className=\"form-control\" />\r\n                            <span className=\"text-danger\">{this.state.cpasswordError}</span>\r\n                        </div>\r\n                        <button className=\"btn btn-primary btn-block mt-3\" disabled={!this.state.formValid}>Register</button>\r\n                        <br/>\r\n                        {this.state.errorMessage?<span className=\"text-danger\">{this.state.errorMessage}</span>:null}\r\n                        {this.state.successMessage?<div><span className=\"text-success\">{this.state.successMessage}!</span> <Link to=\"/login\">Click here</Link> to log in</div>:null}\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </React.Fragment>\r\n    }\r\n}\r\n\r\nexport default Register","import React from 'react'\r\nimport Axios from \"axios\"\r\nimport { Redirect } from 'react-router-dom'\r\n\r\nclass Login extends React.Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            userName: \"\",\r\n            password: \"\",\r\n            userNameError: \"\",\r\n            passwordError: \"\",\r\n            valid: {\r\n                userNameValid:false,\r\n                passwordValid:false\r\n            },\r\n            errorMessage:\"\",\r\n            formValid: false,\r\n            logIn:false\r\n        }\r\n    }\r\n    handleChange = (event) => {\r\n        let name = event.target.name\r\n        let value = event.target.value\r\n        this.setState({ [name]: value })\r\n        this.validator(name,value)\r\n    }\r\n    validator=(name,value)=>{\r\n        let valid=this.state.valid\r\n        switch(name){\r\n            case 'userName':    if(value===\"\"){\r\n                                    this.setState({userNameError:\"Username cannot be blank\"})\r\n                                    valid.userNameValid=false\r\n                                }\r\n                                else if(!value.match(/^[a-zA-Z]{1,}$/)){\r\n                                    this.setState({ userNameError: \"Username can only contain alphabets\" })\r\n                                    valid.userNameValid = false\r\n                                }\r\n                                else{\r\n                                    this.setState({userNameError:\"\"})\r\n                                    valid.userNameValid=true\r\n                                }\r\n                                break\r\n            case 'password':    if(value===\"\"){\r\n                                    this.setState({passwordError:\"Password cannot be blank\"})\r\n                                    valid.passwordValid=false\r\n                                }\r\n                                else{\r\n                                    this.setState({passwordError:\"\"})\r\n                                    valid.passwordValid=true\r\n                                }\r\n                                break\r\n            default: break\r\n        }\r\n        if(valid.passwordValid && valid.userNameValid){\r\n            this.setState({formValid:true})\r\n        }\r\n        else{\r\n            this.setState({formValid:false})\r\n        }\r\n    }\r\n\r\n\r\n    handleSubmit=(event)=>{\r\n        event.preventDefault()\r\n        let obj = {\r\n            userName : this.state.userName,\r\n            password : this.state.password\r\n        }\r\n        Axios.post(\"http://localhost:4000/login\",obj).then((response)=>{\r\n            this.setState({logIn:true,errorMessage:\"\"})\r\n\r\n        }).catch((error)=>{\r\n            if(error.response){\r\n                this.setState({errorMessage:error.response.data.message,logIn:false})\r\n            }\r\n            else{\r\n                this.setState({errorMessage:\"Server Error!\",logIn:false})\r\n            }\r\n        })\r\n    }\r\n    render() {\r\n        if(this.state.logIn){\r\n            localStorage.setItem(\"userName\",this.state.userName.toLowerCase())\r\n            return <Redirect to=\"/todo\"></Redirect>\r\n        }\r\n        return <React.Fragment>\r\n            <div className=\"col-md-4 offset-md-4 mt-3 card bg-light\">\r\n                <div className=\"card-body text-dark\">\r\n                    <h4>Login Form</h4>\r\n                    <form onSubmit={this.handleSubmit}>\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"userName\">Username:</label>\r\n                            <input type=\"text\" id=\"userName\" name=\"userName\" onChange={this.handleChange} value={this.state.userName} placeholder=\"Enter username\" className=\"form-control\" />\r\n                            <span className=\"text-danger\">{this.state.userNameError}</span>\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"userName\">Password:</label>\r\n                            <input type=\"password\" id=\"password\" name=\"password\" onChange={this.handleChange} value={this.state.password} placeholder=\"Enter password\" className=\"form-control\" />\r\n                            <span className=\"text-danger\">{this.state.passwordError}</span>\r\n                        </div>\r\n                        <button className=\"btn btn-primary btn-block mt-3\" disabled={!this.state.formValid} >Login</button>\r\n                        <br></br>\r\n                        {this.state.errorMessage?<span className=\"text-danger\">{this.state.errorMessage}</span>:null}\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </React.Fragment>\r\n    }\r\n}\r\n\r\nexport default Login","import React from 'react';\r\nimport {Link,Route, Switch, BrowserRouter as Router } from 'react-router-dom'\r\nimport './App.css';\r\nimport Home from './Home'\r\nimport Todo from './Todo'\r\nimport Register from './Register';\r\nimport Login from './Login';\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    return <Router>\r\n      <div style={{\r\n        background: `url(${'./back.jpg'})`,\r\n        backgroundSize: 'cover',\r\n        backgroundPosition: 'center center',\r\n        backgroundRepeat: 'no-repeat'\r\n      }}>\r\n        <Link to=\"/\" style={{textDecoration:'none'}}><h1 className=\"display-4 text-white text-center zoom\">ToDo Application</h1></Link>\r\n        \r\n        <Switch>\r\n          <Route exact path=\"/\" component={Home} />\r\n          <Route path=\"/todo\" component={Todo} />\r\n          <Route path=\"/register\" component={Register}/>\r\n          <Route path=\"/login\" component={Login}/>\r\n        </Switch>\r\n        <div style={{ height: \"500px\" }}></div>\r\n      </div>\r\n    </Router>\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\n\r\nReactDOM.render(\r\n  <App/>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}